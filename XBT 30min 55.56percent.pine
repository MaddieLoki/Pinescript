//@version=3
strategy("Long Short Strategy v1", overlay=true)

src = close

// RSI with EMA
len = input(7, minval=1, title="RSI Length")
len2 = input(21, minval=1, title="EMA of RSI Length")
up = rma(max(change(src), 0), len)
down = rma(-min(change(src), 0), len)
rsi = down == 0 ? 100 : up == 0 ? 0 : 100 - (100 / (1 + up / down))
emaRSI = ema(rsi,len2)

// Inputs EMA
DisplayEMA = input(true, title="Display EMA")
ma8 = na
ma8 := ema(src, 8)
ma13 = na
ma13 := ema(src, 13)
ma21 = na
ma21 := ema(src, 21)
ma55 = na
ma55 := ema(src, 55)
ma100 = na
ma100 := ema(src, 100)
ma200 = na
ma200 := ema(src, 200)
vegas12 = na
vegas12 := ema(src, 12)
vegas144 = na
vegas144 := ema(src, 144)
vegas169 = na
vegas169 := ema(src, 169)
buy_cond = false
buy_cond := cross(ma21, ma55) and ma8 > ma13 and ma21 > ma55
sell_cond = false
sell_cond := cross(ma21, ma55) and ma8 < ma13 and ma21 < ma55
golden_cond = false
golden_cond := cross(ma55, ma100) and ma8 > ma100 and ma13 > ma100 and ma21 > ma100
death_cond = false
death_cond := cross(ma100, ma55) and ma8 < ma100 and ma13 < ma100 and ma21 < ma100

// Plotting EMA
plotarrow(buy_cond ? 1 : 0, colordown=lime, maxheight=25, minheight=15)
plotarrow(sell_cond ? -1 : 0, colorup=red, maxheight=25, minheight=15)
plotshape(golden_cond, style=shape.triangleup, location=location.belowbar, color=lime, text = "\nG\nC")
plotshape(death_cond, style=shape.triangledown, location=location.abovebar, color=red, text = "D\nC\n")
//plot( ma8, color=red, transp=0, style=line, title="8", linewidth=1)
//plot( ma13, color=orange, transp=0, style=line, title="13", linewidth=1)
plot( ma21, color=yellow, transp=0, style=line, title="21", linewidth=1)
plot( ma55, color=lime, transp=0, style=line, title="55", linewidth=1)
plot( ma100, color=aqua, transp=0, style=line, title="100", linewidth=1)
plot( ma200, color=white, transp=0, style=line, title="200", linewidth=1)
plot( vegas12, color=red, transp=0, style=line, title="vegas12", linewidth=2)
plot( vegas144, color=orange, transp=0, style=line, title="vegas144", linewidth=2)
plot( vegas169, color=orange, transp=0, style=line, title="vegas169", linewidth=2)

//WaveTrend Calculations
n1 = input(10, "Channel Length")
n2 = input(21, "Average Length")
obLevel2 = input(50, "Over Bought Level 2")
osLevel2 = input(-50, "Over Sold Level 2")
ap = hlc3
esa = ema(ap, n1)
d = ema(abs(ap - esa), n1)
ci = (ap - esa) / (0.015 * d)
tci = ema(ci, n2)
wt1 = tci
wt2 = sma(wt1,4)
wtShort = wt1 > obLevel2 
wtLong = wt2 < osLevel2 
bgcolor(wt1 < obLevel2 ? lime : na)
bgcolor(wt1 > osLevel2 ? red : na)

// *** ADX/DI Calculations ***
lenADXDI = input(title="ADX Length", type=integer, defval=14)
ADXDIthreshold = input(title="ADX Threshold", type=integer, defval=20)
TrueRange = max(max(high-low, abs(high-nz(src[1]))), abs(low-nz(src[1])))
DirectionalMovementPlus = high-nz(high[1]) > nz(low[1])-low ? max(high-nz(high[1]), 0): 0
DirectionalMovementMinus = nz(low[1])-low > high-nz(high[1]) ? max(nz(low[1])-low, 0): 0
SmoothedTrueRange = na
SmoothedTrueRange := nz(SmoothedTrueRange[1]) - (nz(SmoothedTrueRange[1])/lenADXDI) + TrueRange
SmoothedDirectionalMovementPlus = na
SmoothedDirectionalMovementPlus := nz(SmoothedDirectionalMovementPlus[1]) - (nz(SmoothedDirectionalMovementPlus[1])/lenADXDI) + DirectionalMovementPlus
SmoothedDirectionalMovementMinus = na
SmoothedDirectionalMovementMinus := nz(SmoothedDirectionalMovementMinus[1]) - (nz(SmoothedDirectionalMovementMinus[1])/lenADXDI) + DirectionalMovementMinus
DIPlus = SmoothedDirectionalMovementPlus / SmoothedTrueRange * 100
DIMinus = SmoothedDirectionalMovementMinus / SmoothedTrueRange * 100
DX = abs(DIPlus-DIMinus) / (DIPlus+DIMinus)*100
ADX = sma(DX, lenADXDI)

// *** CCI Coded OBV ***
cciobvlength = input(20, minval=1, title="CCI Length")
cciobvthreshold=input(0, title="CCI threshold for OBV coding")
cciobvlengthema=input(7, title="cciobv EMA length")
obv(src) => 
    cum(change(src) > 0 ? volume : change(src) < 0 ? -volume : 0*volume)
    
o=obv(src)
c=cci(src, cciobvlength)
cciobv_ema = ema(o,cciobvlengthema)

//*** PFE: Polarized Fractal Efficiency ***
PFE_Length = input(10)
PFE_Smoothing = input(5)
ln = PFE_Length - 1
diff = close - close[ln]
pfetmp = 100 * sqrt(pow(diff,2) + pow(PFE_Length,2)) / sum(sqrt(1 + pow(close - close[1],2)), PFE_Length - 1)
pfe = ema( diff > 0 ? pfetmp : -pfetmp, PFE_Smoothing)

// *** VFI: Volume Flow Indicator ***
vfilength = input(130, title="VFI length")
coef = input(0.2)
vcoef = input(2.5, title="Max. vol. cutoff")
vfiSignalLength=input(5)
smoothVFI=input(false, type=bool)
ma(x,y) => smoothVFI ? sma(x,y) : x
typical=hlc3
inter = log( typical ) - log( typical[1] )
vinter = stdev(inter, 30 )
cutoff = coef * vinter * close
vave = sma( volume, vfilength )[1]
vmax = vave * vcoef
vc = iff(volume < vmax, volume, vmax) //min( volume, vmax )
mf = typical - typical[1]
vcp = iff( mf > cutoff, vc, iff ( mf < -cutoff, -vc, 0 ) )
vfi = ma(sum( vcp , vfilength )/vave, 3)
vfiema=ema( vfi, vfiSignalLength )

// *** TTM SQUEEZE ***
TTMlength = input(title="TTM Length", type=integer, defval=20, minval=0) 
bband(TTMlength, mult) =>
	sma(src, TTMlength) + mult * stdev(src, TTMlength)
keltner(TTMlength, mult) =>
	ema(src, TTMlength) + mult * ema(tr, TTMlength)

e1 = (highest(high, TTMlength) + lowest(low, TTMlength)) / 2 + sma(close, TTMlength)
TTMosc = linreg(close - e1 / 2, TTMlength, 0)
TTMdiffTTM = bband(TTMlength, 2) - keltner(TTMlength, 1)
//osc_color = TTMosc[1] < TTMosc[0] ? TTMosc[0] >= 0 ? #00ffff : #cc00cc : TTMosc[0] >= 0 ? #009b9b : #ff9bff
//mid_color = TTMdiff >= 0 ? green : red

//Signals
pfeCloseLong = pfe > 0 and pfe[1] > pfe
pfeCloseShort = pfe < 0 and pfe[1] < pfe
pfeLong = pfe < -68
pfeShort = pfe > 50
ADXOverThreshold = ADX > ADXDIthreshold
ADXTrending = ADX[3] < ADX[2] and ADX[1] < ADX
ADXLongTrend = DIPlus > DIMinus and ADXTrending
ADXShortTrend = DIMinus > DIPlus and ADXTrending
ADXLong = DIPlus <= 13 and DIMinus >= 55
ADXShort = DIMinus <= 13 and DIPlus >= 55
ADXLongCross = crossover(DIPlus, DIMinus)
ADXShortCross = crossover(DIMinus, DIPlus)
rsiEmaLong = crossover(rsi, emaRSI)  
rsiEmaShort = crossunder(emaRSI, rsi)
rsiEmaTrendLong = emaRSI[2] < emaRSI[1] and emaRSI[1] < emaRSI
rsiEmaTrendShort = emaRSI[2] > emaRSI[1] and emaRSI[1] > emaRSI
rsiShort = rsi >= 60
rsiLong = rsi <= 35
cciobv_Long = c > cciobvthreshold
cciobv_Short = c < cciobvthreshold
cciobv_TrendLong = cciobv_ema[3] < cciobv_ema[2] and cciobv_ema[2] < cciobv_ema[1] and cciobv_ema[1] < cciobv_ema
cciobv_TrendShort = cciobv_ema[3] > cciobv_ema[2] and cciobv_ema[2] > cciobv_ema[1] and cciobv_ema[1] > cciobv_ema 

// *** Candlestick Reversal Strategy ***
ReversalLong = low < low[1] and close > high[1]  and open <open[1]
ReversalShort = high > high[1] and close < low[1] and open >open[1]
plotshape(ReversalLong,  title= "ReversalLong", location=location.belowbar, color=lime, style=shape.arrowup, text="\n#\n#")
plotshape(ReversalShort,  title= "ReversalShort", location=location.abovebar, color=red, style=shape.arrowdown, text="#\n#\n")

// *** Strategy Long/Short Call Calculation ***
//flagLong = (cciobv_TrendLong and ADXTrending and (rsiLong == false))
//flagShort = (cciobv_TrendShort and ADXTrending and (rsiShort == false))
//flagLong = (cciobv_TrendLong and ADXTrending and not pfeShort)
//flagShort = (cciobv_TrendShort and ADXTrending and not pfeLong)
flagLong = pfeLong and rsiLong and vfi > vfiema and vfiema[1] < vfiema
flagShort = pfeShort and rsiShort and vfi < vfiema and vfiema[1] > vfiema

inLongPosition  = na
inLongPosition := flagLong[1] ? true : flagShort[1] ? false : inLongPosition[1]
inShortPosition = na
inShortPosition:= flagShort[1] ? true : flagLong[1] ? false : inShortPosition[1]
flat  = na
flat := not inLongPosition and not inShortPosition

// *** Plot Long/Short Call Calculation ***
plotshape(flagLong and (inShortPosition or flat), style = shape.flag, color = lime, location = location.belowbar, text="\nL\nO\nN\nG")
plotshape(flagShort and (inLongPosition or flat), style = shape.flag, color = red, location = location.abovebar, text="S\nH\nO\nR\nT\n") 

// *** STRATEGY *** //
//stop_levelL = strategy.position_avg_price - (160)
//stop_levelS = strategy.position_avg_price + (160)
stop_levelL = strategy.position_avg_price - (strategy.position_avg_price * 0.025) 
stop_levelS = strategy.position_avg_price + (strategy.position_avg_price * 0.025)

if (flagLong and year > 2017)
    strategy.entry("Long", strategy.long, 1, comment="L")
//    strategy.close_all(when=PFE_CloseLong and strategy.position_size > 0)
    strategy.close("Long", when=(src<=stop_levelL))

if (flagShort and year > 2017)
    strategy.entry("Short", strategy.short, 1, comment="S")
    strategy.close("Short", when=(src>=stop_levelS))

plot(stop_levelL, color=lime, style=cross, linewidth=1)
plot(stop_levelS, color=red, style=cross, linewidth=1)