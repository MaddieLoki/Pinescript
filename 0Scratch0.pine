// create base on http://www.dailyfx.com/forex_forum/coding-strategy-advisors-indicators-functions/237563-ttm-squeeze-indicator.html
study("TTM Squeeze") 
length = input(title="Length", type=integer, defval=20, minval=0) 
bband(length, mult) =>
	sma(close, length) + mult * stdev(close, length)
keltner(length, mult) =>
	ema(close, length) + mult * ema(tr, length)

e1 = (highest(high, length) + lowest(low, length)) / 2 + sma(close, length)
osc = linreg(close - e1 / 2, length, 0)
diff = bband(length, 2) - keltner(length, 1)
osc_color = osc[1] < osc[0] ? osc[0] >= 0 ? #00ffff : #cc00cc : osc[0] >= 0 ? #009b9b : #ff9bff
//osc_color = osc[1] < osc[0] ? osc[0] >= 0 ? HighUp : LowUp : osc[0] >= 0 ? HighDown : LowDown
// if osc[1] < osc and osc[0] >= 0 then HighUp (#00ffff-Light Blue)
// if not osc[1] < osc and osc[0] >= 0 then HighDown (#009b9b-Dark Blue)
// if not osc[1] < osc and not osc[0] >= 0 then LowDown (#ff9bff-Light Purple)
// if osc[1] < osc and not osc[0] >= 0 then LowUp (#cc00cc-Dark Purple)

TTMoscLB = osc[1] < osc and osc[0] >= 0
TTMoscDB = not osc[1] < osc and osc[0] >= 0
TTMoscLP = not osc[1] < osc and not osc[0] >= 0
TTMoscDP = osc[1] < osc and not osc[0] >= 0
TTMTriggerShort = TTMoscLB[1] and TTMoscDB
TTMTriggerLong = TTMoscLP[1] and TTMoscDP

mid_color = diff >= 0 ? green : red

// TTM Squeeze Plots
plot(osc, color=osc_color, style=histogram, linewidth=2)
plot(0, color=mid_color, style=circles, linewidth=3)

// Wave Plots
plot(macd6, color=#FF0000, style=histogram, title="Wave C1", linewidth=3)
plot(hist5, color=#FF8C00, style=histogram, title="Wave C2", linewidth=3)

plot(hist4, color=#FF00FF, style=histogram, title="Wave B1", linewidth=3)
plot(hist3, color=#0000FF, style=histogram, title="Wave B2", linewidth=3)

plot(hist2, color=#008000, style=histogram, title="Wave A1", linewidth=3)
plot(hist1, color=#DAA520, style=histogram, title="Wave A2", linewidth=3)


//Signals
TTMSqueezeOff = TTMdiff >= 0 
TTMSqueezeOn = TTMSqeezeOff ? false : true
TTMBreakHigh = TTMSqeezeOn[1] and TTMSqeezeOff and TTMosc > 0
TTMBreakLow = TTMSqeezeOn[1] and TTMSqueezeOff and TTMosc < 0
=================

// *** TTM Squeeze ***
TTMlength = input(title="TTM Length", type=integer, defval=20, minval=0) 
TTMbband(TTMlength, mult) =>
	sma(close, TTMlength) + mult * stdev(close, TTMlength)
TTMkeltner(TTMlength, mult) =>
	ema(close, TTMlength) + mult * ema(tr, TTMlength)

TTMe1 = (highest(high, TTMlength) + lowest(low, TTMlength)) / 2 + sma(close, TTMlength)
TTMosc = linreg(close - e1 / 2, TTMlength, 0)
TTMdiff = TTMbband(TTMlength, 2) - TTMkeltner(TTMlength, 1)
//TTMosc_color = TTMosc[1] < TTMosc[0] ? TTMosc[0] >= 0 ? #00ffff : #cc00cc : TTMosc[0] >= 0 ? #009b9b : #ff9bff
//TTMmid_color = TTMdiff >= 0 ? green : red

// Wave A
fastMA1 = ema(close, 8)
slowMA1 = ema(close, 34)
macd1 =  fastMA1 - slowMA1
signal1 =  ema(macd1, 34)
hist1 =  macd1 - signal1
fastMA2 = ema(close, 8)
slowMA2 = ema(close, 55)
macd2 = fastMA2 - slowMA2
signal2 = ema(macd2, 55)
hist2 = macd2 - signal2

// Wave B
fastMA3 = ema(close, 8)
slowMA3 = ema(close, 89)
macd3 = fastMA3 - slowMA3
signal3 = ema(macd3, 89)
hist3 = macd3 - signal3
fastMA4 = ema(close, 8)
slowMA4 = ema(close, 144)
macd4 = fastMA4 - slowMA4
signal4 = ema(macd4, 144)
hist4 = macd4 - signal4

// Wave C
fastMA5 = ema(close, 8)
slowMA5 = ema(close, 233)
macd5 = fastMA5 - slowMA5
signal5 = ema(macd5, 233)
hist5 = macd5 - signal5
fastMA6 = ema(close, 8)
slowMA6 = ema(close, 377)
macd6 = fastMA6 - slowMA6



inLongPosition  = na
inLongPosition := flagLong[1] ? true : flagShort[1] ? false : inLongPosition[1]
inShortPosition = na
inShortPosition:= flagShort[1] ? true : flagLong[1] ? false : inShortPosition[1]
flat  = na
flat := not inLongPosition and not inShortPosition


cm_dc modified_v2_lower_alert
donchian channels

flagLong := (vegas12 > ma21 and vegas12 - ma21 > 0.0001 and rsi < 40) ? true : (inShortPosition and rsi < 10) ? true : false
flagShort := (vegas12 < ma21 and ma21 - vegas12 > 0.0001 and rsi > 60) ? true : (inLongPosition and rsi > 90) ? true : false





// *** Stop Loss, Take Profile Trailing Stop ***

stopLossPercent=input(4,"Stop Loss Percent")
profitPercent=input(8,"Profit Percent")

//Order open on previous ticker?
inLongPosition := nz(inLongPosition[1])
inShortPosition := nz(inShortPosition[1])

//Trailing and Profit variables
trigger = 0.0
trigger := na 

profitTrigger = 0.0
profitTrigger := na 

//obtain values from last ticker
entryPrice=0.0
entryPrice:= nz(entryPrice[1])

stopLossLevel=0.0
stopLossLevel:=nz(stopLossLevel[1])

profitPriceLevel=0.0
profitPriceLevel:=nz(profitPriceLevel[1])

//If in active trade, lets load with current value    
if(inLongPosition )
    profitTrigger := profitPriceLevel ? high: na
    trigger :=  stopLossLevel ? ohlc4 : na 
if(inShortPosition )
    profitTrigger := profitPriceLevel ? low: na
    trigger :=  stopLossLevel ? ohlc4 : na 

isStopLoss = inLongPosition ? trigger < stopLossLevel : (inShortPosition? trigger > stopLossLevel : na )
isProfitCatch = inLongPosition ? profitTrigger > profitPriceLevel : (inShortPosition? profitTrigger <profitPriceLevel  : na )

//Upon Entry, do this.
if(flagLong or flagShort)
    entryPrice:=ohlc4 

//set price points for new orders
if flagLong
    stopLossLevel := (1 - 0.01 * stopLossPercent) * entryPrice
    profitPriceLevel := (1 + 0.01 * profitPercent) * entryPrice
if flagShort
    stopLossLevel := (1 + 0.01 * stopLossPercent) * entryPrice
    profitPriceLevel :=(1 - 0.01 * profitPercent) * entryPrice

// High/Low marker for info
highest=0.0
highest := high > highest[1] and entryPrice ? high : nz(highest[1])

lowest=0.0
lowest := (low < lowest[1] or lowest[1]==0.0 ) and entryPrice ? low : nz(lowest[1])

shortExit = inShortPosition[1] and (isStopLoss or isProfitCatch or flagLong)
longExit = inLongPosition[1] and (isStopLoss or  isProfitCatch or flagShort)


if (longExit or shortExit) and not (flagLong or flagShort)
    trigger:=na
    profitTrigger:=na
    entryPrice:=na
    stopLossLevel:=na
    profitPriceLevel:=na
    highest:=na
    lowest:=na
    
//If the value changed to invoke a buy, lets set it before we leave
inLongPosition := longEntry  ? true : (longExit == true ? false : inLongPosition)
inShortPosition := shortEntry ? true : (shortExit == true ? false : inShortPosition)

plotshape(inShortPosition,  title= "Short Open", color=red, style=shape.circle, location=location.bottom)
plotshape(inLongPosition,  title= "Long Open", color=green, style=shape.circle, location=location.bottom)

plotshape(entryPrice?entryPrice:na,  title= "Entry Level", color=black, style=shape.circle, location=location.absolute)
plotshape(stopLossLevel?stopLossLevel:na,  title= "Stop Loss Level", color=orange, style=shape.circle, location=location.absolute)
plotshape(profitPriceLevel?profitPriceLevel:na,  title= "Profit Level", color=blue, style=shape.circle, location=location.absolute)
plotshape(tradeType == "LONG" ? highest?highest:na : lowest?lowest:na,  title= "High/Low", color=red, style=shape.diamond, location=location.absolute)
plotshape(profitTrigger[1]?isProfitCatch:na,title="Profit Exit Triggered",style=shape.diamond,location=location.abovebar,color=blue,size=size.small)
plotshape(trigger[1]?isStopLoss:na,title="Stop Loss Triggered",style=shape.diamond,location=location.belowbar,color=orange,size=size.small)


*********************
*********************
// *** Stop Loss and Trailing Stop ***
stopLossPercent=input(4,"Stop Loss Percent")
profitPercent=input(8,"Profit Percent")

//Order open on previous ticker?
inLongPosition := nz(inLongPosition[1])
inShortPosition := nz(inShortPosition[1])

//Trailing and Profit variables
trigger = 0.0
trigger := na 

profitTrigger = 0.0
profitTrigger := na 

//obtain values from last ticker
entryPrice=0.0
entryPrice:= nz(entryPrice[1])

stopLossLevel=0.0
stopLossLevel:=nz(stopLossLevel[1])

profitPriceLevel=0.0
profitPriceLevel:=nz(profitPriceLevel[1])

//If in active trade, lets load with current value    
if(inLongPosition )
    profitTrigger := profitPriceLevel ? high: na
    trigger :=  stopLossLevel ? ohlc4 : na 
if(inShortPosition )
    profitTrigger := profitPriceLevel ? low: na
    trigger :=  stopLossLevel ? ohlc4 : na 

isStopLoss = inLongPosition ? trigger < stopLossLevel : (inShortPosition? trigger > stopLossLevel : na )
isProfitCatch = inLongPosition ? profitTrigger > profitPriceLevel : (inShortPosition? profitTrigger <profitPriceLevel  : na )

//Upon Entry, do this.
if(flagLong or flagShort)
    entryPrice:=ohlc4 

//set price points for new orders
if flagLong
    stopLossLevel := (1 - 0.01 * stopLossPercent) * entryPrice
    profitPriceLevel := (1 + 0.01 * profitPercent) * entryPrice
if flagShort
    stopLossLevel := (1 + 0.01 * stopLossPercent) * entryPrice
    profitPriceLevel :=(1 - 0.01 * profitPercent) * entryPrice

// High/Low marker for info
highest=0.0
highest := high > highest[1] and entryPrice ? high : nz(highest[1])

lowest=0.0
lowest := (low < lowest[1] or lowest[1]==0.0 ) and entryPrice ? low : nz(lowest[1])

shortExit = inShortPosition[1] and (isStopLoss or isProfitCatch or flagLong)
longExit = inLongPosition[1] and (isStopLoss or  isProfitCatch or flagShort)


if (longExit or shortExit) and not (flagLong or flagShort)
    trigger:=na
    profitTrigger:=na
    entryPrice:=na
    stopLossLevel:=na
    profitPriceLevel:=na
    highest:=na
    lowest:=na
    
//If the value changed to invoke a buy, lets set it before we leave
inLongPosition := flagLong  ? true : (longExit == true ? false : inLongPosition)
inShortPosition := flagShort ? true : (shortExit == true ? false : inShortPosition)

// *** Plot Stop Loss and Take Profit Targets ***    
//plot(inLongPosition ? stopLossLevel : na, color=red, style=cross, linewidth=1)
//plot(inLongPosition ? profitPriceLevel : na, color=green, style=cross, linewidth=1)
//plotshape(profitTrigger[1]?isProfitCatch:na,title="Profit Exit Triggered",style=shape.diamond,location=location.abovebar,color=blue,size=size.small)
//plotshape(trigger[1]?isStopLoss:na,title="Stop Loss Triggered",style=shape.diamond,location=location.belowbar,color=orange,size=size.small)


====================
====================


// *** Weighted Volume Moving Avg ***
fmal=input(3,"First Moving Average length")
smal=input(5,"Second Moving Average length")
tmal=fmal+smal
Fmal=smal+tmal
Ftmal=tmal+Fmal
Smal=Fmal+Ftmal
M1= wma(close, fmal)
M2= wma(M1, smal)
M3= wma(M2, tmal)
M4= wma(M3, Fmal)
M5= wma(M4, Ftmal)
MAVW= wma(M5, Smal)
col1= MAVW>MAVW[1]
col3= MAVW<MAVW[1]
color = col1 ? blue : col3 ? red : yellow
M12= wma(close, 3)
M22= wma(M12, 5)
M32= wma(M22, 8)
M42= wma(M32, 13)
M52= wma(M42, 21)
MAVW2= wma(M52, 34)
plot(MAVW, color=color, linewidth=1, transp=0, title="MAVW")

==================================================================

//
// @author LazyBear
//
study(title = "Elliot Wave Oscillator [LazyBear]", shorttitle="EWO_LB")
s2=ema(close, 5) - ema(close, 35)
c_color=s2 <= 0 ? red : lime
plot(s2, color=c_color, style=histogram, linewidth=2)

==================================================================

study(title="FibFib", shorttitle="AutoFib", overlay=true)
fiblength=input(265)
maxr = highest(close, fiblength)
minr = lowest(close, fiblength)
ranr = maxr - minr

ON=plot( maxr , color=black,  title="1")
SS=plot( maxr - 0.236 * ranr, title="0.764", color=#3399FF )
SO=plot( maxr - 0.382 * ranr, title="0.618", color=blue )
FI=plot( maxr - 0.50 * ranr, title="0.5", color=lime )
TE=plot( minr + 0.382 * ranr, title="0.382", color=green )
TT=plot( minr + 0.236 * ranr, title="0.236", color=red )
ZZ=plot( minr , title="0", color=black )

fill(ON,SS, color=red)
fill(SS,SO, color=#3399FF)
fill(SO,FI, color=lime)
fill(FI,TE, color=lime)
fill(TE,TT, color=#3399FF)
fill(TT,ZZ, color=red)

==================================================================

//Created by ChrisMoody
//Based on Larry Connors RSI-2 Strategy - Lower RSI
study(title="_CM_RSI_2_Strat_Low", shorttitle="_CM_RSI_2_Strategy_Lower", overlay=false)
src = close, 

//RSI CODE
up = rma(max(change(src), 0), 2)
down = rma(-min(change(src), 0), 2)
rsi = down == 0 ? 100 : up == 0 ? 0 : 100 - (100 / (1 + up / down))
//Criteria for Moving Avg rules
ma5 = sma(close,5)
ma200= sma(close, 200)

//Rule for RSI Color
col = close > ma200 and close < ma5 and rsi < 10 ? lime : close < ma200 and close > ma5 and rsi > 90 ? red : silver

plot(rsi, title="RSI", style=line, linewidth=4,color=col)
plot(100, title="Upper Line 100",style=line, linewidth=3, color=aqua)
plot(0, title="Lower Line 0",style=line, linewidth=3, color=aqua)

band1 = plot(90, title="Upper Line 90",style=line, linewidth=3, color=aqua)
band0 = plot(10, title="Lower Line 10",style=line, linewidth=3, color=aqua)
fill(band1, band0, color=silver, transp=90)

==================================================================

//title
study(title="RSI Candles 3 - by SatoshiHeavy",overlay = true, shorttitle="RSI Candles 2")


//rsi input
src = close, len = input(14, minval=1, title="Length")
//coloring user input
src1 = close, len1 = input(65, minval=1, title="Overbought")
src2 = close, len2 = input(35, minval=1, title="Oversold")
src3 = close, len11 = input(80, minval=1, title="Very Overbought")
src4 = close, len22 = input(25, minval=1, title="Very Oversold")


//rsi processing
up = rma(max(change(src), 0), len)
down = rma(-min(change(src), 0), len)
rsi = down == 0 ? 100 : up == 0 ? 0 : 100 - (100 / (1 + up / down))


//coloring function
isBought() => rsi > len1 and rsi < len11
isSold() => rsi < len2 and rsi > len22
isVeryBought() => rsi > len11 and rsi > len1
isVerySold() => rsi < len22 and rsi < len2

barcolor(isBought() ? color(#38761D, 0) : isSold() ? color(#FC0A0A00, 0) : isVeryBought() ? color(#0C343D00, 0) : isVerySold() ? color(#970000, 0) : na )







