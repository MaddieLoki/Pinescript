//@version=3
study("Long Short Study v1", overlay=true)

src = close

// RSI with EMA
len = input(13, minval=1, title="RSI Length")
len2 = input(34, minval=1, title="EMA of RSI Length")
up = rma(max(change(src), 0), len)
down = rma(-min(change(src), 0), len)
rsi = down == 0 ? 100 : up == 0 ? 0 : 100 - (100 / (1 + up / down))
emaRSI = ema(rsi,len2)

rsiEmaLong = crossover(rsi, emaRSI)  
rsiEmaShort = crossunder(emaRSI, rsi)
rsiOverBought = rsi > 55
rsiOverSold = rsi < 50

// Inputs Pivot
leftBars  = input(13,title="Pivot Left Bars")
rightBars = input(34,title="Pivot Right Bars")

// Calculate Pivot Points
swh = pivothigh(leftBars, rightBars)
swl = pivotlow(leftBars, rightBars)
swh_cond = not na(swh)
hprice = 0.0
hprice := swh_cond ? swh : hprice[1]
swl_cond = not na(swl)
lprice = 0.0
lprice := swl_cond ? swl : lprice[1]

// Signals
long  = crossover(high, hprice + syminfo.mintick)
short = crossunder(low, lprice - syminfo.mintick)
last_signal = 0
pivotLong  = long  and (nz(last_signal[1]) == 0 or nz(last_signal[1]) == -1)
pivotShort = short and (nz(last_signal[1]) == 0 or nz(last_signal[1]) == 1)
last_signal := pivotLong ? 1 : pivotShort ? -1 : last_signal[1]

// Plotting Pivot: PL=Pivot Long, PS=Pivot Short
plotshape(pivotLong,  style = shape.triangleup,   color = lime,   location = location.belowbar, text = "\nP\nL")
plotshape(pivotShort, style = shape.triangledown, color = red,     location = location.abovebar, text = "P\nS\n") 

// Inputs EMA
exponential = input(true, title="Exponential MA")
ma8 = na
ma8 := exponential ? ema(src, 8) : sma(src, 8)
ma13 = na
ma13 := exponential ? ema(src, 13) : sma(src, 13)
ma21 = na
ma21 := exponential ? ema(src, 21) : sma(src, 21)
ma55 = na
ma55 := exponential ? ema(src, 55) : sma(src, 55)
ma100 = na
ma100 := exponential ? ema(src, 100) : sma(src, 100)
ma200 = na
ma200 := exponential ? ema(src, 200) : sma(src, 200)
buy_cond = false
buy_cond := cross(ma21, ma55) and ma8 > ma13 and ma21 > ma55
sell_cond = false
sell_cond := cross(ma21, ma55) and ma8 < ma13 and ma21 < ma55
golden_cond = false
golden_cond := cross(ma55, ma100) and ma8 > ma100 and ma13 > ma100 and ma21 > ma100
death_cond = false
death_cond := cross(ma100, ma55) and ma8 < ma100 and ma13 < ma100 and ma21 < ma100

// Plotting EMA
plotarrow(buy_cond ? 1 : 0, colordown=lime, maxheight=25, minheight=15)
plotarrow(sell_cond ? -1 : 0, colorup=red, maxheight=25, minheight=15)
plotshape(golden_cond, style=shape.triangleup, location=location.belowbar, color=lime, text = "\nG\nC")
plotshape(death_cond, style=shape.triangledown, location=location.abovebar, color=red, text = "D\nC\n")
plot( ma8, color=red, style=line, title="8", linewidth=1)
plot( ma13, color=orange, style=line, title="13", linewidth=1)
plot( ma21, color=yellow, style=line, title="21", linewidth=1)
plot( ma55, color=lime, style=line, title="55", linewidth=1)
plot( ma100, color=white, style=line, title="100", linewidth=1)
plot( ma200, color=blue, style=line, title="200", linewidth=1)

//DeMarker Calculations
per=input(title="DeMarker Period",type=integer,defval=13)
demax=high>high[1] ? high-high[1] : 0   
demin=low<low[1] ? low[1]-low : 0
demax_av=sma(demax,per)
demin_av=sma(demin,per)
dmark=demax_av/(demax_av+demin_av)
dmarkShort = (dmark > 0.55)
dmarkLong = (dmark < 0.45)

//WaveTrend Calculations
n1 = input(10, "Channel Length")
n2 = input(21, "Average Length")
obLevel2 = input(42, "Over Bought Level 2")
osLevel2 = input(-20, "Over Sold Level 2")
ap = hlc3
esa = ema(ap, n1)
d = ema(abs(ap - esa), n1)
ci = (ap - esa) / (0.015 * d)
tci = ema(ci, n2)
wt1 = tci
wt2 = sma(wt1,4)
wtShort = wt1 > obLevel2 
wtLong = wt2 < osLevel2 
bgcolor(wt1 < obLevel2 ? lime : na)
bgcolor(wt1 > osLevel2 ? red : na)

pivotConflictShort = false
pivotConflictShort := wtShort and pivotLong
pivotConflictLong = false
pivotConflictLong := wtLong and pivotShort

// *** MACD Calculations ***
macdfastLength = input(12, minval=1)
macdslowLength = input(26,minval=1)
macdsignalLength = input(9,minval=1)

macdfastMA = ema(src, macdfastLength)
macdslowMA = ema(src, macdslowLength)

macd = macdfastMA - macdslowMA
macdsignal = sma(macd, macdsignalLength)
macdhist = macd - macdsignal

histA_IsUp = macdhist > macdhist[1] and macdhist > 0
histA_IsDown = macdhist < macdhist[1] and macdhist > 0
histB_IsDown = macdhist < macdhist[1] and macdhist <= 0
histB_IsUp = macdhist > macdhist[1] and macdhist <= 0

//MacD Status
macd_IsAbove = macd >= macdsignal
macd_IsBelow = macd < macdsignal


// *** ADX/DI Calculations ***
lenADXDI = input(title="ADX Length", type=integer, defval=14)
ADXDIthreshold = input(title="ADX Threshold", type=integer, defval=20)

TrueRange = max(max(high-low, abs(high-nz(src[1]))), abs(low-nz(src[1])))
DirectionalMovementPlus = high-nz(high[1]) > nz(low[1])-low ? max(high-nz(high[1]), 0): 0
DirectionalMovementMinus = nz(low[1])-low > high-nz(high[1]) ? max(nz(low[1])-low, 0): 0

SmoothedTrueRange = na
SmoothedTrueRange := nz(SmoothedTrueRange[1]) - (nz(SmoothedTrueRange[1])/lenADXDI) + TrueRange
SmoothedDirectionalMovementPlus = na
SmoothedDirectionalMovementPlus := nz(SmoothedDirectionalMovementPlus[1]) - (nz(SmoothedDirectionalMovementPlus[1])/lenADXDI) + DirectionalMovementPlus
SmoothedDirectionalMovementMinus = na
SmoothedDirectionalMovementMinus := nz(SmoothedDirectionalMovementMinus[1]) - (nz(SmoothedDirectionalMovementMinus[1])/lenADXDI) + DirectionalMovementMinus

DIPlus = SmoothedDirectionalMovementPlus / SmoothedTrueRange * 100
DIMinus = SmoothedDirectionalMovementMinus / SmoothedTrueRange * 100
DX = abs(DIPlus-DIMinus) / (DIPlus+DIMinus)*100
ADX = sma(DX, lenADXDI)

// ADX Signals
ADXTrend = ADX > ADXDIthreshold
ADXLong = DIPlus > ADXDIthreshold
ADXShort = DIPlus < DIMinus

// *** Strategy Long/Short Call Calculation ***
flagLong = (ADXTrend and rsiOverSold and wtLong and dmarkLong and (pivotConflictLong == false))
flagShort = (ADXTrend and rsiOverBought and wtShort and dmarkShort and (pivotConflictShort == false))

inLongPosition  = na
inLongPosition := flagLong[1] ? true : flagShort[1] ? false : inLongPosition[1]
inShortPosition = na
inShortPosition:= flagShort[1] ? true : flagLong[1] ? false : inShortPosition[1]
flat  = na
flat := not inLongPosition and not inShortPosition

// *** Plot Long/Short Call Calculation ***
plotshape(flagLong and (inShortPosition or flat), style = shape.flag, color = lime, location = location.belowbar, text="\nL\nO\nN\nG")
plotshape(flagShort and (inLongPosition or flat), style = shape.flag, color = red, location = location.abovebar, text="S\nH\nO\nR\nT\n") 

// *** Long/Short Call Alert ***
alertcondition(flagLong and (inShortPosition or flat), "Multi Long", "Multi Long Triggered")
alertcondition(flagShort and (inLongPosition or flat), "Multi Short", "Multi Short Triggered")